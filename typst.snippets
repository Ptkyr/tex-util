global !p
def math():
	return vim.eval('typst#in_math()') == '1'
endglobal

snippet [] "Content" wA
[$1]$0
endsnippet

# preamble
snippet template "Basic template" b
#import "@local/base:1.0.0": *
#import "@local/boxes:1.0.0": *
#import "@local/linalg:1.0.0": *

#show: doc => meta(
    "$1",
    doc,
)
$0
endsnippet

snippet pac "Package" b
#import "@preview/${1:package}:${2:ver}": $0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Block math" wA
$
${1:${VISUAL}}
.
$ 
$0
endsnippet

snippet thm "Theorem" bA
#thm[$1][
$2
]
$0
endsnippet

snippet cor "Corollary" bA
#cor[$1][
$2
]
$0
endsnippet

snippet lemma "Lemma" bA
#lemma[$1][
$2
]
$0
endsnippet

snippet defn "Definition" bA
#defn[$1][
$2
]
$0
endsnippet

snippet prop "Proposition" bA
#prop[$1][
$2
]
$0
endsnippet

snippet remk "Remark" bA
#remk[$1]
$0
endsnippet

snippet exmp "Example" bA
#exmp[$1]
$0
endsnippet

snippet note "Note" bA
#note[$1]
$0
endsnippet

snippet gj "RREF Steps" b
$
#grid(
    align: right + horizon,
    inset: 2pt,
    columns: 5,
    $A =$,
    $ mat(
        1, 2, 3;
        4, 5, 6;
        7, 8, 9;
    ) $,
    $rrarrow(R_1 --> R_1 + R_2)$,
    $ mat(
        1, 2, 3;
        4, 5, 6;
        7, 8, 9;
    ) $,
    $->$,
    $rrarrow(R_1 --> R_1 + R_2)$,
)
$
endsnippet

###### MATH CONTEXT ######
context "math()"
snippet of "function of" iA
(${1:x})$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_(`!p snip.rv = match.group(2)`)
endsnippet

context "math()"
snippet td "to the ... power" iA
^($1)$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet inv "inverse" iA
^(-1)
endsnippet

context "math()"
snippet set "set" wA
{$1}$0
endsnippet

context "math()"
snippet vec "vec" wA
vec($1)$0
endsnippet

### LIMITS
priority 200
context "math()"
snippet dint "definite integral" wA
integral_(${1:-infinity})^(${2:infinity}) ${4:${VISUAL}} dif ${3:x} $0
endsnippet

priority 300
context "math()"
snippet iint "indefinite integral" wA
integral ${2:${VISUAL}} dif ${1:x} $0
endsnippet

### RELATIONS 
priority 100
context "math()"
snippet geq "geq" iA
 >= 
endsnippet

priority 100
context "math()"
snippet leq "leq" iA
 <= 
endsnippet

priority 10
context "math()"
snippet eq "equals" iA
 &= $1 \\$0
endsnippet

priority 100
context "math()"
snippet cc "subseteq" iA
 subset.eq 
endsnippet

### UTIL
priority 10
context "math()"
snippet "vv" "vec" ri
vv($1)$0
endsnippet

priority 100
context "math()"
snippet "([0a-zA-Z](_{?[0-9a-z+-]+}?)?)vv" "vec" riA
vv(`!p snip.rv=match.group(1)`)
endsnippet

context "math()"
snippet ooo "infinity" iA
infinity
endsnippet

context "math()"
snippet emp "empty set" iA
diameter
endsnippet

snippet ,, "tablesep" iA
 , $0
endsnippet
