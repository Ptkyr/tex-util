global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

# preamble
snippet template "Basic template" b
\documentclass{article}
\usepackage[
	course=$1,
	code=$2,
	doctype=$3,
	docnum=$4
]{base}

\usepackage{linalg}
\usepackage{cats}
\usepackage{boxes}

\begin{document}
$0
\end{document}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet
# </preamble>

# math mode
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] 
$0
endsnippet
# </math mode>

# environments
snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\def\arraystretch{1.2}
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}[(a)$1]
	\item $0
\end{enumerate}
endsnippet

snippet tikz "Tikzpicture" b
\begin{center}
\begin{tikzpicture}[$1]
	$0
\end{tikzpicture}
\end{center}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

snippet thm "Theorem" bA
\begin{thm}{$1}
	$2
\end{thm}
$0
endsnippet

snippet lemma "Lemma" bA
\begin{lemma}{$1}
	$2
\end{lemma}
$0
endsnippet

snippet defn "Definition" bA
\begin{defn}{$1}
	$2
\end{defn}
$0
endsnippet

snippet prop "Proposition" bA
\begin{prop}{$1}
	$2
\end{prop}
$0
endsnippet

snippet remk "Remark" bA
\begin{remk}
	$1
\end{remk}
$0
endsnippet

snippet exmp "Example" bA
\begin{exmp}
	$1
\end{exmp}
$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} 
	$1 
\end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix}
	$1
\end{bmatrix} $0
endsnippet

snippet gj "RREF Steps" bA
\begin{alignat*}{3}
	A =
	&\setbm{
		$1
	}
	\begin{aligned}
		\rrstep{$2}
	\end{aligned}
	$0
\end{alignat*}
endsnippet

context "math()"
snippet case "cases" bA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet plot "Plot" b
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{bmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{bmatrix}
endsnippet
# </environments>

# formatting
snippet small "smallbreak" bA
\smallbreak
$0
endsnippet

snippet med "medbreak" bA
\medbreak
$0
endsnippet

snippet big "bigbreak" bA
\bigbreak
$0
endsnippet

snippet np "newpage" bA
\newpage
$0
endsnippet

snippet qq "question number" bA
\textbf{Question $1.}
$0
endsnippet

snippet bf "bold" w
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet ul "underline" w
\underline{${1:${VISUAL}}}$0
endsnippet

snippet it "bold" w
\emph{$1}$0
endsnippet

context "math()"
snippet tx "text" iA
\text{$1}$0
endsnippet

snippet cc "code" w
\code{$1}$0 
endsnippet

snippet blk "codeblock" bA
\begin{codeblock}
$1
\end{codeblock}
$0
endsnippet

snippet two "twosplit" bA
\begin{twosplit}
$1
\end{twosplit}
$0
endsnippet

# For vectors with dfracs to look okay
snippet "\\\\f" "frac newline" riA
\\\\[9pt]
endsnippet
# </formatting>

# limits
priority 200
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${4:${VISUAL}} \\,d${3:x} $0
endsnippet

priority 300
context "math()"
snippet idint "integral" wA
\int ${2:${VISUAL}} \\,d${1:x} $0
endsnippet

context "math()"
snippet "(?<!\\)MIN" "min" rwA
\min\limits_{${1:\vv{x} \in ${2:\mathbb{R}^n}}}
endsnippet

context "math()"
snippet "(?<!\\)MAX" "max" rwA
\max\limits_{${1:\vv{x} \in ${2:\mathbb{R}^n}}}
endsnippet

context "math()"
snippet sum "sum" wA
\sum\limits_{${1:i}=${2:0}}^{${3:\infty}} ${4:x^i}
endsnippet

context "math()"
snippet taylor "taylor" wA
\sum\limits_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x - a)^{$1} $0
endsnippet

context "math()"
snippet lim "limit" w
\lim\limits_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup\limits_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet liminf "liminf" w
\liminf\limits_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "product" wA
\prod\limits_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet bigcup "bigcup" wA
\bigcup\limits_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet bigcap "bigcap" wA
\bigcap\limits_{${1:i \in ${2: I}}} $0
endsnippet
# </limits>

# between
context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet lr "left( right)" iA
\left(${1:${VISUAL}}\right) $0
endsnippet

context "math()"
snippet lb "left[ right]" iA
\left[${1:${VISUAL}}\right] $0
endsnippet

context "math()"
snippet abs "left| right|" iA
\left|${1:${VISUAL}}\right| $0
endsnippet

context "math()"
snippet ipr "inner product" iA
\left\langle ${1:${VISUAL}}\right\rangle$0
endsnippet

context "math()"
snippet set "set" w
\left\\{${1:${VISUAL}}\right\\} $0
endsnippet

context "math()"
snippet of "function of" iA
(${1:x})$0
endsnippet

context "math()"
snippet norm "norm" iA
\norm{$1}$0
endsnippet
# </between>

# frac
#context "math()"
#snippet df "Display Fraction" iA
#\\dfrac{$1}{$2}$0
#endsnippet

context "math()"
snippet df "Fraction" iA
\\dfrac{$1}{$2}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

snippet part "d/dx" w
\dfrac{\partial ${1:f}}{\partial ${2:x}} $0
endsnippet
# </frac>

# Note: not using ([A-Z][A-Z]) as it conflicts with potential
# LHR oversets or LL(1)	or SLR(1) etc.
priority 100
context "math()"
snippet "([A-Z])(\:)" "mathbb" riA
\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(s)([bfxynmljk])" "subn" riA
_`!p snip.rv = match.group(2)`
endsnippet

# Stupid special case because of sin
context "math()"
snippet ii "subi" iA
_i
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet mod "modulo" iA
\pmod{$1}$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet trans "transpose" iA
^T
endsnippet

context "math()"
snippet "([fgh])nd" "nth derivative" riA
`!p snip.rv = match.group(1)`^{(${1:n})}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet ood "\odot" iA
\odot 
endsnippet

context "math()"
snippet oop "\oplus" iA
\oplus 
endsnippet

context "math()"
snippet oot "\otimes" iA
\otimes 
endsnippet

context "math()"
snippet ex "exists" i
\exists 
endsnippet

context "math()"
snippet fa "forall" i
\forall 
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
context "math()"
snippet cd "cdot" iA
\cdot 
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|cot|csc|sec|ln|log|exp)' "functions" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(geq|leq|del|cap|cup)' "relations" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(dim|spn|nllsp|nllty|rank)' "operators" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec)' "otherfunc" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

# Note: does not conflict with \code
context "math()"
snippet cc "subset" Ai
\subseteq 
endsnippet

context "math()"
snippet cont "superset/containing" Ai
\supseteq 
endsnippet

context "math()"
snippet nin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

context "math()"
snippet emp "emptyset" iA
\varnothing
endsnippet

context "math()"
snippet bkwd "backwards iff" iA
(\Leftarrow)
endsnippet

context "math()"
snippet fwd "forwards iff" iA
(\Rightarrow)
endsnippet

context "math()"
snippet iff "iff" iA
\iff
endsnippet

context "math()"
snippet imp "implies" iA
\implies
endsnippet

# special symbols
context "math()"
snippet =< "implied by" iA
\impliedby
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

context "math()"
snippet =- "equiv" iA
\equiv 
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\$0
endsnippet

priority 200
context "math()"
snippet agq "geq" iA
&\geq $1 \\\\$0
endsnippet

priority 200
context "math()"
snippet alq "leq" iA
&\leq $1 \\\\$0
endsnippet

context "math()"
snippet -= "not equals" iA
\neq 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet | "mid" iA
\mid 
endsnippet
snippet -- "tablesep" iA
 & $0
endsnippet

context "math()"
snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet <> "hokje" iA
\diamond 
endsnippet
# </special symbols>

# postscripts
priority 10
context "math()"
snippet "bar" "bar" ri
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet deg "interior/degree" iA
^{\circ}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "vv" "vec" ri
\vv{$1}$0
endsnippet

priority 100
context "math()"
snippet "([0a-zA-Z](_{?[0-9a-z+-]+}?)?)vv" "vec" riA
\vv{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet "over" "overset" riA
\overset{$2}{$1} $0
endsnippet

context "math()"
snippet "over" "overbrace" riA
\overbrace{$1}_\text{$2} $0
endsnippet

context "math()"
snippet "under" "underset" riA
\underset{$2}{$1} $0
endsnippet

context "math()"
snippet "under" "underbrace" riA
\underbrace{$1}_\text{$2} $0
endsnippet
# </postscripts>

# greek
snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet a; "alpha" iA
\alpha
endsnippet

context "math()"
snippet b; "beta" iA
\beta
endsnippet

context "math()"
snippet g; "gamma" iA
\gamma
endsnippet

context "math()"
snippet c; "chi" iA
\chi
endsnippet

context "math()"
snippet d; "delta" iA
\delta
endsnippet

context "math()"
snippet m; "mu" iA
\mu
endsnippet

context "math()"
snippet e; "varepsilon" iA
\varepsilon
endsnippet

context "math()"
snippet z; "zeta" iA
\zeta
endsnippet

context "math()"
snippet t; "theta" iA
\theta
endsnippet

context "math()"
snippet l; "lambda" iA
\lambda
endsnippet

context "math()"
snippet o; "omega" iA
\omega
endsnippet

context "math()"
snippet p; "varphi" iA
\varphi
endsnippet

context "math()"
snippet pi "pi" iA
\pi
endsnippet
# </greek>

# TikZ
snippet node "Tikz node" b
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet reln "Relative Tikz node" b
\node[$2] ($1) {};
$0
endsnippet
# </TikZ>

# complexity
context "math()"
snippet bigo "O()" iA
O\left(${1:n${VISUAL}}\right)$0
endsnippet

context "math()"
snippet bigt "O()" iA
\Theta\left(${1:n${VISUAL}}\right)$0
endsnippet

context "math()"
snippet bigm "O()" iA
\Omega\left(${1:n${VISUAL}}\right)$0
endsnippet
# </complexity>

# english
snippet LI "linearly independent" w
linearly independent
endsnippet

snippet LD "linearly dependent" w
linearly dependent
endsnippet

snippet certinf "certificate of infeasibility" w
certificate of infeasibility
endsnippet

snippet certopt "certificate of optimality" w
certificate of optimality
endsnippet

snippet certunb	"certificate of unboundedness" w
certificate of unboundedness
endsnippet
# </english>

# vim:ft=snippets
