global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

# preamble
snippet template "Basic template" b
\documentclass{article}
\usepackage[
	course=$1,
	code=$2,
	doctype=$3,
	docnum=$4
]{base}

\usepackage{linalg}
\usepackage{cats}

\begin{document}
	$0
\end{document}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet
# </preamble>

# math mode
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet
# </math mode>

# environments
snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}[(a)$1]
	\item $0
\end{enumerate}
endsnippet

snippet tikz "Tikzpicture" b
\begin{center}
\begin{tikzpicture}[$1]
	$0
\end{tikzpicture}
\end{center}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} 
	$1 
\end{pmatrix} 
$0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix}
	$1
\end{bmatrix} 
$0
endsnippet

snippet gj "RREF Steps" bA
\begin{alignat*}{3}
	A =
	&\setbm{
		$1
	}
	\begin{aligned}
		\rrstep{$2}
	\end{aligned}
	$0
\end{alignat*}
endsnippet

context "math()"
snippet case "cases" bA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet plot "Plot" b
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{bmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{bmatrix}
endsnippet
# </environments>

# formatting
snippet med "medbreak" b
\medbreak
$0
endsnippet

snippet big "bigbreak" b
\bigbreak
$0
endsnippet

snippet np "newpage" b
\newpage
$0
endsnippet

snippet qwq "question number" bA
\textbf{Question $1.}
\medbreak
$0
endsnippet

snippet bf "bold" w
\textbf{$1} $0
endsnippet

snippet it "bold" w
\emph{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet
# </formatting>

# limits
priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${4:${VISUAL}} d$3 $0
endsnippet

priority 300
context "math()"
snippet iint "integral" wA
\int ${2:${VISUAL}} d$1 $0
endsnippet

snippet sum "sum" w
\sum\limits_{${1:i}=${2:0}}^{${3:\infty}} ${4:x^i}
endsnippet

snippet taylor "taylor" w
\sum\limits_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x - a)^{$1} $0
endsnippet

snippet lim "limit" w
\lim\limits_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup\limits_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod\limits_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet uuu "bigcup" w
\bigcup\limits_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" w
\bigcap\limits_{${1:i \in ${2: I}}} $0
endsnippet
# </limits>

# between
context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left\langle ${1:${VISUAL}} \right\rangle$0
endsnippet

context "math()"
snippet set "set" w
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet
# </between>

priority 100
context "math()"
snippet "([A-Z][A-Z])" "mathbb" riA
\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet bkwd "backwards iff" Ai
(\Leftarrow)
endsnippet

context "math()"
snippet frwd "forwards iff" Ai
(\Rightarrow)
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet imp "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet df "Display Fraction" iA
\\dfrac{$1}{$2}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet == "equals" iA
&= $1 \\\\
$0
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:f}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet ood "\odot" iA
\odot
endsnippet

snippet oop "\oplus" iA
\oplus
endsnippet

snippet oot "\otimes" iA
\otimes
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet ex "geq" i
\exists 
endsnippet

context "math()"
snippet fa "forall" i
\forall 
endsnippet

context "math()"
snippet nn "subn" iA
_{n}
endsnippet

context "math()"
snippet ii "subi" iA
_{i}
endsnippet

context "math()"
snippet jj "subj" iA
_{j}
endsnippet

context "math()"
snippet mm "subm" iA
_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet lm "lambda" iA
\lambda
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\norm{$1}$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|cot|csc|sec|ln|log|exp)' "functions" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(lambda|alpha|beta|gamma|delta|theta|omega)' "greek" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec)' "otherfunc" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

snippet || "mid" iA
\mid 
endsnippet

context "math()"
snippet cc "subset" Ai
\subseteq 
endsnippet

snippet nin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet ;; "tablesep" iA
 & $0
endsnippet

snippet empty "emptyset" iA
\varnothing
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

# postscripts
priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "vv" "vec" ri
\vv{$1}$0
endsnippet

priority 100
context "math()"
snippet "([0a-zA-Z])vv" "v" riA
\vv{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet
# </postscripts>

# TikZ
snippet node "Tikz node" b
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet reln "Relative Tikz node" b
\node[$2] ($1) {};
$0
endsnippet
# </TikZ>

# no idea what anything below here does
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet
# vim:ft=snippets
